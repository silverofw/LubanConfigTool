//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.monster
{ 

public sealed partial class Monster :  Bright.Config.BeanBase 
{
    public Monster(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  Price = _json["price"]; }
        { if(!_json["move_speed"].IsNumber) { throw new SerializationException(); }  MoveSpeed = _json["move_speed"]; }
        { var _j = _json["expire_time"]; if (_j.Tag != JSONNodeType.None && _j.Tag != JSONNodeType.NullValue) { { if(!_j.IsNumber) { throw new SerializationException(); }  ExpireTime = _j; } } else { ExpireTime = null; } }
        { if(!_json["batch_useable"].IsBoolean) { throw new SerializationException(); }  BatchUseable = _json["batch_useable"]; }
        { var __json0 = _json["exchange_list"]; if(!__json0.IsArray) { throw new SerializationException(); } ExchangeList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ExchangeList.Add(__v0); }   }
        PostInit();
    }

    public Monster(int id, string name, string desc, int price, float move_speed, int? expire_time, bool batch_useable, System.Collections.Generic.List<int> exchange_list ) 
    {
        this.Id = id;
        this.Name = name;
        this.Desc = desc;
        this.Price = price;
        this.MoveSpeed = move_speed;
        this.ExpireTime = expire_time;
        this.BatchUseable = batch_useable;
        this.ExchangeList = exchange_list;
        PostInit();
    }

    public static Monster DeserializeMonster(JSONNode _json)
    {
        return new monster.Monster(_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int Price { get; private set; }
    /// <summary>
    /// 引用当前表
    /// </summary>
    public float MoveSpeed { get; private set; }
    /// <summary>
    /// 过期时间
    /// </summary>
    public int? ExpireTime { get; private set; }
    /// <summary>
    /// 能否批量使用
    /// </summary>
    public bool BatchUseable { get; private set; }
    public System.Collections.Generic.List<int> ExchangeList { get; private set; }

    public const int __ID__ = 1495842214;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Price:" + Price + ","
        + "MoveSpeed:" + MoveSpeed + ","
        + "ExpireTime:" + ExpireTime + ","
        + "BatchUseable:" + BatchUseable + ","
        + "ExchangeList:" + Bright.Common.StringUtil.CollectionToString(ExchangeList) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
